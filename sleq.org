#+TITLE: OCISC
#+AUTHOR: jmc
#+DATE: <2023-04-02 dim.>

* One-Instruction CISC Machine
** The SUBLEQ OCISC Machine  
Sources:
  - [[https://esolangs.org/wiki/Subleq]]

** Protyping
   Prototype Options: breadboard, stripboard (Vero Board)

   Design options: The same memory space is used both for instructions and r/w memory (the M[B] result written back). This would a prori exclude the use of EEPROM for firmware, unless for instance a minimal FORTH could be constructed without a requirement for self-modyfing SUBLEQ instructions?

  - Following the TRS analogy a continuous addressing covering an EEPROM, with addresses 0000H to ENDROM, followed by a RAM, with addresses ENDROM+1 to ffffH, which would be uninitialized (or zeroed) at each boot.
  - A single RAM, with addresses 0000H to ffffH, the content of which is at boot copied from secondary storage -- a SD card -- and explicitly saved back before switch-off. The SD card would work a bit like a LISP image.
   
** Logical Circuit Design
      Logical Circuits Simulators: Logisim 2.7.1, Atanua
      PCB, Routing: Kicad

** Hardware considerations
*** A full TTL design
   See also: [[https://en.wikipedia.org/wiki/List_of_7400-series_integrated_circuits]]
   
| Module           | Chip                 | Ex (Mouser)           | Qty LM | Qty MAIN |
|------------------+----------------------+-----------------------+--------+----------|
| Counter          | D-FlipFlop 74LS74    | SN74LS74ANE4          |      0 |        4 |
| Mod 5            | 3-1 NAND             | SN74LS11N             |      3 |          |
| Mod 5            | 1-1 NOT              | SN74LS04N             |      3 |        1 |
| Buffer Registers | 4b PIPO              | SN74LS173AN           |      0 |    3 x 4 |
|                  | 2x8b PIPO            | 74FCT16374CTPVG       |      0 |        3 |
| NAND             | NAND 2i, x4          | SN7400NE4             |      1 |        3 |
| OR               | OR 2i, x4            | SN7432N               |      1 |        2 |
| LED              |                      |                       |        |        6 |
| MUX              | MUX 2 x 16b          |                       |        |          |
| Diff             | DIF 16b              |                       |        |          |
| Comp 0           | COMP 4b to 0,        | SN74LS85N             |      0 |        4 |
|                  | COMP 8b =            | SN74LS688NE4          |      0 |        2 |
| RAM              | RAM 16b x 256K words | IS41LV16256C-35TLI    |      0 |        1 |
|                  | RAM 16b x 16M words  | IS42S16160J           |      0 |        1 |
|                  | Flash 16b x 128      | SST39VF200A-70-4C-EKE |      0 |        1 |
|                  |                      |                       |        |          |


Some sources:
  - David A. Roberts [[https://github.com/davidar/subleq]]
  - Ben Eater [[https://eater.net/8bit/|8-bit Computer]]
    
*** Microcontroller-based with SUBLEQ emulator
    Arduino, ESP-32

*** IO Design
    - Full keyboard + LCD
    - Serial line connection for input/output
    
** Tool Chain
   ~sqasm~: [[https://github.com/rcook/subleq]] A SUBLEQ assembler.
   
** Python implementation
   A simple execution monitor, using Tkinter for GUI, in ~sleq.py~. It loads csv files, where each line lists the space-separated A, B and C values.
   
** C implementation
See [[file:subleq.c]] from Howe's book.

** Z80 implementation
* Applications
** Forth
Howe's SUBLEQ machine memory layout:
  - 0: Zero register
  - 1: Zero register
  - 2: Jump to FORTH VM start (W a multiple of 3)
  - 3: Options variable (16b)
  - 3 to W-1: System variables
  - W: /label start/ FORTH VM start, entry point
  - X: /label vm/ FORTH inner interpreter
  - Z: FORTH code using vm instructions
  - End: ... memory area

* Chrono
<2023-04-09 dim.> ~sqleq.c~ minimal C SUBLEQ engine, w. optional output.
<2023-04-10 lun.> Returned to ~lbforth~ as a target. Added ~words~ word.
